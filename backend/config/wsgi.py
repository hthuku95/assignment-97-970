content='import os\nimport sys\nimport logging\nfrom pathlib import Path\nfrom django.core.wsgi import get_wsgi_application\n\n# Build paths inside the project like this: BASE_DIR / \'subdir\'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Add the project directory to the Python path\nsys.path.append(str(BASE_DIR))\n\n# Set the default Django settings module for the \'wsgi\' application.\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'config.settings\')\n\n# Configure logging for WSGI application\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\',\n    handlers=[\n        logging.StreamHandler(sys.stdout),\n        logging.FileHandler(\'logs/wsgi.log\', mode=\'a\') if os.path.exists(\'logs\') else logging.NullHandler()\n    ]\n)\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    # Initialize Django WSGI application\n    application = get_wsgi_application()\n    logger.info("WSGI application initialized successfully")\n    \nexcept Exception as e:\n    logger.error(f"Failed to initialize WSGI application: {str(e)}")\n    # Re-raise the exception to prevent the server from starting with a broken configuration\n    raise\n\n# Health check function for load balancers\ndef health_check(environ, start_response):\n    """\n    Simple health check endpoint for load balancers and monitoring systems.\n    Returns 200 OK if the application is healthy.\n    """\n    if environ.get(\'PATH_INFO\') == \'/health/\':\n        status = \'200 OK\'\n        headers = [\n            (\'Content-Type\', \'application/json\'),\n            (\'Cache-Control\', \'no-cache, no-store, must-revalidate\'),\n            (\'Pragma\', \'no-cache\'),\n            (\'Expires\', \'0\')\n        ]\n        start_response(status, headers)\n        return [b\'{"status": "healthy", "service": "ecommerce-api"}\']\n    \n    # Pass through to Django application for all other requests\n    return application(environ, start_response)\n\n# Wrap the application with middleware for production optimizations\ndef create_wsgi_application():\n    """\n    Create and configure the WSGI application with production optimizations.\n    """\n    try:\n        # Import middleware only if available (optional dependencies)\n        middleware_stack = application\n        \n        # Add security headers middleware if available\n        try:\n            from django.middleware.security import SecurityMiddleware\n            logger.info("Security middleware available")\n        except ImportError:\n            logger.warning("Security middleware not available")\n        \n        # Add CORS middleware if available\n        try:\n            import corsheaders\n            logger.info("CORS headers middleware available")\n        except ImportError:\n            logger.warning("CORS headers middleware not available")\n        \n        # Add compression middleware if available\n        try:\n            from django.middleware.gzip import GZipMiddleware\n            logger.info("GZip compression middleware available")\n        except ImportError:\n            logger.warning("GZip compression middleware not available")\n        \n        return middleware_stack\n        \n    except Exception as e:\n        logger.error(f"Error creating WSGI application: {str(e)}")\n        raise\n\n# Use health check wrapper in production\nif os.environ.get(\'DJANGO_SETTINGS_MODULE\') == \'config.settings.production\':\n    application = health_check\nelse:\n    application = create_wsgi_application()\n\n# Application factory for different deployment scenarios\ndef get_application(settings_module=None):\n    """\n    Factory function to create WSGI application with specific settings.\n    Useful for testing and different deployment environments.\n    """\n    if settings_module:\n        os.environ[\'DJANGO_SETTINGS_MODULE\'] = settings_module\n    \n    try:\n        app = get_wsgi_application()\n        logger.info(f"WSGI application created with settings: {os.environ.get(\'DJANGO_SETTINGS_MODULE\')}")\n        return app\n    except Exception as e:\n        logger.error(f"Failed to create WSGI application: {str(e)}")\n        raise\n\n# Signal handlers for' additional_kwargs={} response_metadata={'id': 'msg_0151fAAc3eV3wKEQEeSKjCCR', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--d5ee1e76-d404-4f93-853c-052531f3ff19-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}