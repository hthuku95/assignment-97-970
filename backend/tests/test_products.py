content='import pytest\nfrom django.test import TestCase\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom decimal import Decimal\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom PIL import Image\nimport io\nimport json\n\nfrom products.models import Product, Category, ProductImage, Review\nfrom products.serializers import ProductSerializer, CategorySerializer\n\nUser = get_user_model()\n\n\nclass ProductModelTest(TestCase):\n    """Test cases for Product model"""\n    \n    def setUp(self):\n        """Set up test data"""\n        self.user = User.objects.create_user(\n            username=\'testuser\',\n            email=\'test@example.com\',\n            password=\'testpass123\'\n        )\n        self.category = Category.objects.create(\n            name=\'Electronics\',\n            description=\'Electronic products\'\n        )\n        self.product = Product.objects.create(\n            name=\'Test Product\',\n            description=\'A test product\',\n            price=Decimal(\'99.99\'),\n            stock=10,\n            category=self.category,\n            created_by=self.user\n        )\n\n    def test_product_creation(self):\n        """Test product creation with valid data"""\n        self.assertEqual(self.product.name, \'Test Product\')\n        self.assertEqual(self.product.price, Decimal(\'99.99\'))\n        self.assertEqual(self.product.stock, 10)\n        self.assertEqual(self.product.category, self.category)\n        self.assertTrue(self.product.is_active)\n\n    def test_product_str_representation(self):\n        """Test product string representation"""\n        self.assertEqual(str(self.product), \'Test Product\')\n\n    def test_product_slug_generation(self):\n        """Test automatic slug generation"""\n        product = Product.objects.create(\n            name=\'Another Test Product\',\n            description=\'Another test product\',\n            price=Decimal(\'149.99\'),\n            stock=5,\n            category=self.category,\n            created_by=self.user\n        )\n        self.assertEqual(product.slug, \'another-test-product\')\n\n    def test_product_is_in_stock(self):\n        """Test product stock status"""\n        self.assertTrue(self.product.is_in_stock())\n        \n        out_of_stock_product = Product.objects.create(\n            name=\'Out of Stock Product\',\n            description=\'A product out of stock\',\n            price=Decimal(\'199.99\'),\n            stock=0,\n            category=self.category,\n            created_by=self.user\n        )\n        self.assertFalse(out_of_stock_product.is_in_stock())\n\n    def test_product_average_rating(self):\n        """Test product average rating calculation"""\n        # Create reviews\n        Review.objects.create(\n            product=self.product,\n            user=self.user,\n            rating=5,\n            comment=\'Great product!\'\n        )\n        \n        user2 = User.objects.create_user(\n            username=\'testuser2\',\n            email=\'test2@example.com\',\n            password=\'testpass123\'\n        )\n        Review.objects.create(\n            product=self.product,\n            user=user2,\n            rating=3,\n            comment=\'Average product\'\n        )\n        \n        self.assertEqual(self.product.average_rating(), 4.0)\n\n\nclass CategoryModelTest(TestCase):\n    """Test cases for Category model"""\n    \n    def setUp(self):\n        """Set up test data"""\n        self.category = Category.objects.create(\n            name=\'Electronics\',\n            description=\'Electronic products\'\n        )\n\n    def test_category_creation(self):\n        """Test category creation with valid data"""\n        self.assertEqual(self.category.name, \'Electronics\')\n        self.assertEqual(self.category.description, \'Electronic products\')\n\n    def test_category_str_representation(self):\n        """Test category string representation"""\n        self.assertEqual(str(self.category), \'Electronics\')\n\n    def test_category_slug_generation(self):\n        """Test automatic slug generation"""\n        category = Category.objects.create' additional_kwargs={} response_metadata={'id': 'msg_01FSuHBJkZNWBTuTNHB5xszT', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 382, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--9a8d607e-f51b-46ac-a5af-b1c909b8bf77-0' usage_metadata={'input_tokens': 382, 'output_tokens': 1024, 'total_tokens': 1406, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}