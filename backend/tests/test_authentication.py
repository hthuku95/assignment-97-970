content='import pytest\nfrom django.test import TestCase\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom django.core import mail\nfrom unittest.mock import patch\nimport json\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\nfrom django.conf import settings\n\nUser = get_user_model()\n\n\nclass AuthenticationAPITestCase(APITestCase):\n    """Test cases for authentication API endpoints"""\n\n    def setUp(self):\n        """Set up test data"""\n        self.client = APIClient()\n        self.user_data = {\n            \'email\': \'test@example.com\',\n            \'password\': \'TestPassword123!\',\n            \'first_name\': \'Test\',\n            \'last_name\': \'User\'\n        }\n        self.user = User.objects.create_user(**self.user_data)\n        self.login_url = reverse(\'auth:login\')\n        self.register_url = reverse(\'auth:register\')\n        self.logout_url = reverse(\'auth:logout\')\n        self.refresh_url = reverse(\'auth:token_refresh\')\n        self.profile_url = reverse(\'auth:profile\')\n        self.change_password_url = reverse(\'auth:change_password\')\n        self.reset_password_url = reverse(\'auth:reset_password\')\n        self.confirm_reset_url = reverse(\'auth:confirm_reset\')\n\n    def tearDown(self):\n        """Clean up after tests"""\n        User.objects.all().delete()\n        mail.outbox.clear()\n\n\nclass UserRegistrationTestCase(AuthenticationAPITestCase):\n    """Test user registration functionality"""\n\n    def test_successful_registration(self):\n        """Test successful user registration"""\n        data = {\n            \'email\': \'newuser@example.com\',\n            \'password\': \'NewPassword123!\',\n            \'password_confirm\': \'NewPassword123!\',\n            \'first_name\': \'New\',\n            \'last_name\': \'User\'\n        }\n        \n        response = self.client.post(self.register_url, data, format=\'json\')\n        \n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertIn(\'access\', response.data)\n        self.assertIn(\'refresh\', response.data)\n        self.assertIn(\'user\', response.data)\n        self.assertEqual(response.data[\'user\'][\'email\'], data[\'email\'])\n        \n        # Verify user was created in database\n        user = User.objects.get(email=data[\'email\'])\n        self.assertEqual(user.first_name, data[\'first_name\'])\n        self.assertEqual(user.last_name, data[\'last_name\'])\n        self.assertTrue(user.check_password(data[\'password\']))\n\n    def test_registration_with_existing_email(self):\n        """Test registration with already existing email"""\n        data = {\n            \'email\': self.user_data[\'email\'],\n            \'password\': \'NewPassword123!\',\n            \'password_confirm\': \'NewPassword123!\',\n            \'first_name\': \'Another\',\n            \'last_name\': \'User\'\n        }\n        \n        response = self.client.post(self.register_url, data, format=\'json\')\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'email\', response.data)\n\n    def test_registration_password_mismatch(self):\n        """Test registration with mismatched passwords"""\n        data = {\n            \'email\': \'newuser@example.com\',\n            \'password\': \'Password123!\',\n            \'password_confirm\': \'DifferentPassword123!\',\n            \'first_name\': \'New\',\n            \'last_name\': \'User\'\n        }\n        \n        response = self.client.post(self.register_url, data, format=\'json\')\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'password_confirm\', response.data)\n\n    def test_registration_weak_password(' additional_kwargs={} response_metadata={'id': 'msg_01Us5XrR4Jn4mEBJkGaWGczT', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--21788d65-fff6-4a6a-a1f2-9132b431ea29-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}