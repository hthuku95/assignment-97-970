content='#!/usr/bin/env python\n"""Django\'s command-line utility for administrative tasks."""\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n\ndef main():\n    """Run administrative tasks."""\n    # Set the default settings module\n    os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\n    \n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        # Enhanced error message for missing Django\n        error_message = (\n            "Couldn\'t import Django. Are you sure it\'s installed and "\n            "available on your PYTHONPATH environment variable? Did you "\n            "forget to activate a virtual environment?"\n        )\n        \n        # Log the error for debugging\n        logging.error(f"Django import error: {exc}")\n        logging.error(error_message)\n        \n        raise ImportError(error_message) from exc\n    \n    # Additional setup for production environments\n    setup_environment()\n    \n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        logging.error(f"Management command execution failed: {e}")\n        sys.exit(1)\n\n\ndef setup_environment():\n    """Setup environment-specific configurations."""\n    # Ensure the project root is in Python path\n    project_root = Path(__file__).parent\n    if str(project_root) not in sys.path:\n        sys.path.insert(0, str(project_root))\n    \n    # Setup basic logging configuration\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\',\n        handlers=[\n            logging.StreamHandler(sys.stdout)\n        ]\n    )\n    \n    # Validate critical environment variables for production\n    required_env_vars = [\'SECRET_KEY\']\n    if os.environ.get(\'DJANGO_SETTINGS_MODULE\', \'\').endswith(\'production\'):\n        required_env_vars.extend([\n            \'DATABASE_URL\',\n            \'STRIPE_PUBLISHABLE_KEY\',\n            \'STRIPE_SECRET_KEY\',\n            \'EMAIL_HOST_USER\',\n            \'EMAIL_HOST_PASSWORD\'\n        ])\n    \n    missing_vars = [var for var in required_env_vars if not os.environ.get(var)]\n    if missing_vars:\n        logging.warning(f"Missing environment variables: {\', \'.join(missing_vars)}")\n\n\ndef check_dependencies():\n    """Check if all required dependencies are available."""\n    required_packages = [\n        \'django\',\n        \'djangorestframework\',\n        \'django-cors-headers\',\n        \'django-allauth\',\n        \'stripe\',\n        \'celery\',\n        \'redis\',\n        \'psycopg2\'\n    ]\n    \n    missing_packages = []\n    for package in required_packages:\n        try:\n            __import__(package.replace(\'-\', \'_\'))\n        except ImportError:\n            missing_packages.append(package)\n    \n    if missing_packages:\n        logging.warning(f"Missing packages: {\', \'.join(missing_packages)}")\n        logging.info("Run \'pip install -r requirements.txt\' to install missing dependencies")\n\n\nif __name__ == \'__main__\':\n    # Perform dependency check in development\n    if \'--check-deps\' in sys.argv:\n        check_dependencies()\n        sys.argv.remove(\'--check-deps\')\n    \n    main()' additional_kwargs={} response_metadata={'id': 'msg_01N1KMuKCBvyjDyH7BTtY6ih', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 396, 'output_tokens': 839, 'service_tier': 'standard'}} id='run--18c42a80-8ee8-4abd-a8d8-1af2792da96b-0' usage_metadata={'input_tokens': 396, 'output_tokens': 839, 'total_tokens': 1235, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}