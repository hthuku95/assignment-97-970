content='from decimal import Decimal\nfrom django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator\nfrom django.utils import timezone\nfrom django.core.exceptions import ValidationError\nimport uuid\nimport logging\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n\nclass PaymentMethod(models.Model):\n    """Model for storing customer payment methods"""\n    \n    PAYMENT_TYPES = [\n        (\'card\', \'Credit/Debit Card\'),\n        (\'paypal\', \'PayPal\'),\n        (\'bank_transfer\', \'Bank Transfer\'),\n        (\'digital_wallet\', \'Digital Wallet\'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'payment_methods\')\n    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPES)\n    stripe_payment_method_id = models.CharField(max_length=255, unique=True, null=True, blank=True)\n    \n    # Card details (masked for security)\n    card_last_four = models.CharField(max_length=4, blank=True)\n    card_brand = models.CharField(max_length=20, blank=True)\n    card_exp_month = models.IntegerField(null=True, blank=True)\n    card_exp_year = models.IntegerField(null=True, blank=True)\n    \n    # PayPal details\n    paypal_email = models.EmailField(blank=True)\n    \n    is_default = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'payment_methods\'\n        ordering = [\'-is_default\', \'-created_at\']\n        indexes = [\n            models.Index(fields=[\'user\', \'is_active\']),\n            models.Index(fields=[\'stripe_payment_method_id\']),\n        ]\n    \n    def __str__(self):\n        if self.payment_type == \'card\' and self.card_last_four:\n            return f"{self.card_brand} ending in {self.card_last_four}"\n        elif self.payment_type == \'paypal\' and self.paypal_email:\n            return f"PayPal ({self.paypal_email})"\n        return f"{self.get_payment_type_display()}"\n    \n    def save(self, *args, **kwargs):\n        if self.is_default:\n            # Ensure only one default payment method per user\n            PaymentMethod.objects.filter(\n                user=self.user, \n                is_default=True\n            ).exclude(id=self.id).update(is_default=False)\n        \n        super().save(*args, **kwargs)\n    \n    def clean(self):\n        if self.payment_type == \'card\':\n            if not all([self.card_last_four, self.card_brand, self.card_exp_month, self.card_exp_year]):\n                raise ValidationError("Card details are required for card payment type")\n        elif self.payment_type == \'paypal\':\n            if not self.paypal_email:\n                raise ValidationError("PayPal email is required for PayPal payment type")\n\n\nclass PaymentTransaction(models.Model):\n    """Model for tracking all payment transactions"""\n    \n    STATUS_CHOICES = [\n        (\'pending\', \'Pending\'),\n        (\'processing\', \'Processing\'),\n        (\'succeeded\', \'Succeeded\'),\n        (\'failed\', \'Failed\'),\n        (\'canceled\', \'Canceled\'),\n        (\'refunded\', \'Refunded\'),\n        (\'partially_refunded\', \'Partially Refunded\'),\n    ]\n    \n    TRANSACTION_TYPES = [\n        (\'payment\', \'Payment\'),\n        (\'refund\', \'Refund\'),\n        (\'partial_refund\', \'Partial' additional_kwargs={} response_metadata={'id': 'msg_019GRoHVaoBwD6Tedcc9pQQR', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--4bd277f6-61cf-47da-aac7-b1818658b25f-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}