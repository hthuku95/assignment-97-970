content='import logging\nimport stripe\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_POST\nfrom django.utils.decorators import method_decorator\nfrom django.db import transaction\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nfrom apps.orders.models import Order\nfrom apps.cart.models import Cart, CartItem\nfrom .models import Payment, PaymentIntent\nfrom .serializers import PaymentIntentSerializer, PaymentSerializer\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\n# Configure Stripe\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\nclass CreatePaymentIntentView(APIView):\n    """\n    Create a Stripe payment intent for an order\n    """\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        try:\n            cart = Cart.objects.get(user=request.user)\n            cart_items = CartItem.objects.filter(cart=cart)\n            \n            if not cart_items.exists():\n                return Response(\n                    {\'error\': \'Cart is empty\'}, \n                    status=status.HTTP_400_BAD_REQUEST\n                )\n\n            # Calculate total amount\n            total_amount = sum(\n                item.quantity * item.product.price \n                for item in cart_items\n            )\n            \n            # Convert to cents for Stripe\n            amount_cents = int(total_amount * 100)\n\n            # Create Stripe payment intent\n            intent = stripe.PaymentIntent.create(\n                amount=amount_cents,\n                currency=\'usd\',\n                metadata={\n                    \'user_id\': request.user.id,\n                    \'cart_id\': cart.id\n                }\n            )\n\n            # Save payment intent to database\n            payment_intent = PaymentIntent.objects.create(\n                user=request.user,\n                stripe_payment_intent_id=intent.id,\n                amount=total_amount,\n                currency=\'usd\',\n                status=\'pending\'\n            )\n\n            serializer = PaymentIntentSerializer(payment_intent)\n            \n            return Response({\n                \'client_secret\': intent.client_secret,\n                \'payment_intent\': serializer.data\n            }, status=status.HTTP_201_CREATED)\n\n        except Cart.DoesNotExist:\n            return Response(\n                {\'error\': \'Cart not found\'}, \n                status=status.HTTP_404_NOT_FOUND\n            )\n        except stripe.error.StripeError as e:\n            logger.error(f"Stripe error: {str(e)}")\n            return Response(\n                {\'error\': \'Payment processing error\'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n        except Exception as e:\n            logger.error(f"Unexpected error in CreatePaymentIntentView: {str(e)}")\n            return Response(\n                {\'error\': \'An unexpected error occurred\'}, \n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\nclass ConfirmPaymentView(APIView):\n    """\n    Confirm a payment and create an order\n    """\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        payment_intent_id = request.data.get(\'payment_intent_id\')\n        \n        if not payment_intent_id:\n            return Response(\n                {\'error\': \'Payment intent ID is required\'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        try:\n            with transaction.atomic():\n                # Get payment intent from database\n                payment_intent = PaymentIntent.objects.get(\n                    stripe_payment_intent_id=payment_intent_id,\n                    user=request.user\n                )\n\n                # Retrieve payment intent from Stripe\n                stripe_intent = stripe.PaymentIntent.retrieve(payment_intent_id)\n                \n                if stripe_intent.status != \'succeeded\':\n                    return Response(\n                        {\'error\': \'Payment not' additional_kwargs={} response_metadata={'id': 'msg_01L2v5GenXPaQWiSVrSSDqBg', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--3aa8c659-6b64-4a98-8739-5a2cf53e429e-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}