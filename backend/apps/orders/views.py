content='from rest_framework import generics, status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.pagination import PageNumberPagination\nfrom django.shortcuts import get_object_or_404\nfrom django.db import transaction\nfrom django.utils import timezone\nfrom django.db.models import Q, Sum, F\nimport logging\nimport stripe\nfrom decimal import Decimal\n\nfrom .models import Order, OrderItem\nfrom .serializers import (\n    OrderSerializer, \n    OrderCreateSerializer, \n    OrderItemSerializer,\n    OrderStatusUpdateSerializer\n)\nfrom apps.products.models import Product\nfrom apps.users.permissions import IsOwnerOrReadOnly, IsAdminOrReadOnly\n\nlogger = logging.getLogger(__name__)\n\n\nclass OrderPagination(PageNumberPagination):\n    page_size = 20\n    page_size_query_param = \'page_size\'\n    max_page_size = 100\n\n\nclass OrderListCreateView(generics.ListCreateAPIView):\n    """\n    List orders for authenticated user or create a new order\n    """\n    serializer_class = OrderSerializer\n    permission_classes = [IsAuthenticated]\n    pagination_class = OrderPagination\n    \n    def get_queryset(self):\n        user = self.request.user\n        queryset = Order.objects.select_related(\'user\').prefetch_related(\n            \'items__product\'\n        )\n        \n        if user.is_staff:\n            # Admin can see all orders\n            queryset = queryset.all()\n        else:\n            # Regular users can only see their own orders\n            queryset = queryset.filter(user=user)\n        \n        # Filter by status if provided\n        status_filter = self.request.query_params.get(\'status\')\n        if status_filter:\n            queryset = queryset.filter(status=status_filter)\n        \n        # Filter by date range\n        date_from = self.request.query_params.get(\'date_from\')\n        date_to = self.request.query_params.get(\'date_to\')\n        if date_from:\n            queryset = queryset.filter(created_at__gte=date_from)\n        if date_to:\n            queryset = queryset.filter(created_at__lte=date_to)\n        \n        return queryset.order_by(\'-created_at\')\n    \n    def get_serializer_class(self):\n        if self.request.method == \'POST\':\n            return OrderCreateSerializer\n        return OrderSerializer\n    \n    def perform_create(self, serializer):\n        """\n        Create a new order with proper validation and inventory management\n        """\n        try:\n            with transaction.atomic():\n                # Set the user to the authenticated user\n                order = serializer.save(user=self.request.user)\n                \n                # Calculate total and validate inventory\n                total_amount = Decimal(\'0.00\')\n                items_data = self.request.data.get(\'items\', [])\n                \n                for item_data in items_data:\n                    product = get_object_or_404(Product, id=item_data[\'product\'])\n                    quantity = item_data[\'quantity\']\n                    \n                    # Check inventory\n                    if product.stock_quantity < quantity:\n                        raise ValueError(f"Insufficient stock for {product.name}")\n                    \n                    # Create order item\n                    order_item = OrderItem.objects.create(\n                        order=order,\n                        product=product,\n                        quantity=quantity,\n                        price=product.price\n                    )\n                    \n                    # Update product inventory\n                    product.stock_quantity = F(\'stock_quantity\') - quantity\n                    product.save(update_fields=[\'stock_quantity\'])\n                    \n                    total_amount += order_item.price * quantity\n                \n                # Update order total\n                order.total_amount = total_amount\n                order.save(update_fields=[\'total_amount\'])\n                \n                logger.info(f"Order {order.id} created successfully for user {self.request.user.id}")\n                \n        except Exception as e:\n            logger.error(f"Error creating order: {str(e)}")' additional_kwargs={} response_metadata={'id': 'msg_01X9A3QqV12N9JJYff3wVaiv', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--d1ef0fe8-1886-47d2-8a68-bdb080058f9a-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}