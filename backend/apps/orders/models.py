content='from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.core.exceptions import ValidationError\nfrom decimal import Decimal\nimport uuid\nfrom django.utils import timezone\nfrom apps.products.models import Product\n\n\nclass Cart(models.Model):\n    """\n    Shopping cart model for storing user\'s selected items before checkout\n    """\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'cart\')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    session_key = models.CharField(max_length=40, blank=True, null=True)\n\n    class Meta:\n        db_table = \'carts\'\n        verbose_name = \'Cart\'\n        verbose_name_plural = \'Carts\'\n\n    def __str__(self):\n        return f"Cart for {self.user.username if self.user else \'Anonymous\'}"\n\n    @property\n    def total_items(self):\n        """Calculate total number of items in cart"""\n        return sum(item.quantity for item in self.items.all())\n\n    @property\n    def total_price(self):\n        """Calculate total price of all items in cart"""\n        return sum(item.subtotal for item in self.items.all())\n\n    def clear(self):\n        """Remove all items from cart"""\n        self.items.all().delete()\n\n    def add_item(self, product, quantity=1):\n        """Add or update item in cart"""\n        cart_item, created = CartItem.objects.get_or_create(\n            cart=self,\n            product=product,\n            defaults={\'quantity\': quantity}\n        )\n        \n        if not created:\n            cart_item.quantity += quantity\n            cart_item.save()\n        \n        return cart_item\n\n    def remove_item(self, product):\n        """Remove item from cart"""\n        try:\n            cart_item = self.items.get(product=product)\n            cart_item.delete()\n        except CartItem.DoesNotExist:\n            pass\n\n    def update_item_quantity(self, product, quantity):\n        """Update quantity of specific item"""\n        try:\n            cart_item = self.items.get(product=product)\n            if quantity <= 0:\n                cart_item.delete()\n            else:\n                cart_item.quantity = quantity\n                cart_item.save()\n        except CartItem.DoesNotExist:\n            if quantity > 0:\n                self.add_item(product, quantity)\n\n\nclass CartItem(models.Model):\n    """\n    Individual items within a shopping cart\n    """\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name=\'items\')\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(\n        default=1,\n        validators=[MinValueValidator(1), MaxValueValidator(999)]\n    )\n    added_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'cart_items\'\n        verbose_name = \'Cart Item\'\n        verbose_name_plural = \'Cart Items\'\n        unique_together = [\'cart\', \'product\']\n\n    def __str__(self):\n        return f"{self.quantity}x {self.product.name} in cart"\n\n    @property\n    def subtotal(self):\n        """Calculate subtotal for this cart item"""\n        return self.product.price * self.quantity\n\n    def clean(self):\n        """Validate cart item"""\n        if self.quantity <= 0:\n            raise ValidationError("Quantity must be greater than 0")\n        \n        if self.product.stock < self.quantity:\n            raise ValidationError(f"Not enough' additional_kwargs={} response_metadata={'id': 'msg_01HyAtDHvWMbAtUwFzbysP48', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--5a6849ab-d91d-4a96-a1fb-ee929595e304-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}