content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom decimal import Decimal\nfrom .models import Order, OrderItem\nfrom ..products.models import Product\nfrom ..products.serializers import ProductSerializer\n\nUser = get_user_model()\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    """Serializer for order items with product details"""\n    \n    product = ProductSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    subtotal = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)\n    \n    class Meta:\n        model = OrderItem\n        fields = [\n            \'id\', \'product\', \'product_id\', \'quantity\', \n            \'price\', \'subtotal\', \'created_at\'\n        ]\n        read_only_fields = [\'id\', \'price\', \'subtotal\', \'created_at\']\n    \n    def validate_product_id(self, value):\n        """Validate that the product exists and is available"""\n        try:\n            product = Product.objects.get(id=value)\n            if not product.is_available:\n                raise serializers.ValidationError("This product is not available for purchase")\n            if product.stock_quantity <= 0:\n                raise serializers.ValidationError("This product is out of stock")\n            return value\n        except Product.DoesNotExist:\n            raise serializers.ValidationError("Product does not exist")\n    \n    def validate_quantity(self, value):\n        """Validate quantity is positive and within stock limits"""\n        if value <= 0:\n            raise serializers.ValidationError("Quantity must be greater than 0")\n        \n        # Check stock availability during validation if product_id is available\n        if hasattr(self, \'initial_data\') and \'product_id\' in self.initial_data:\n            try:\n                product = Product.objects.get(id=self.initial_data[\'product_id\'])\n                if value > product.stock_quantity:\n                    raise serializers.ValidationError(\n                        f"Only {product.stock_quantity} items available in stock"\n                    )\n            except Product.DoesNotExist:\n                pass  # Will be caught by product_id validation\n        \n        return value\n\n\nclass OrderCreateSerializer(serializers.ModelSerializer):\n    """Serializer for creating new orders"""\n    \n    items = OrderItemSerializer(many=True, write_only=True)\n    \n    class Meta:\n        model = Order\n        fields = [\n            \'shipping_address\', \'billing_address\', \'phone_number\',\n            \'special_instructions\', \'items\'\n        ]\n    \n    def validate_items(self, value):\n        """Validate that order has at least one item"""\n        if not value:\n            raise serializers.ValidationError("Order must contain at least one item")\n        return value\n    \n    def validate(self, attrs):\n        """Validate the entire order data"""\n        items = attrs.get(\'items\', [])\n        \n        # Check for duplicate products\n        product_ids = [item[\'product_id\'] for item in items]\n        if len(product_ids) != len(set(product_ids)):\n            raise serializers.ValidationError("Duplicate products are not allowed")\n        \n        # Validate stock availability for all items\n        for item_data in items:\n            try:\n                product = Product.objects.get(id=item_data[\'product_id\'])\n                if item_data[\'quantity\'] > product.stock_quantity:\n                    raise serializers.ValidationError(\n                        f"Insufficient stock for {product.name}. "\n                        f"Only {product.stock_quantity} available"\n                    )\n            except Product.DoesNotExist:\n                raise serializers.ValidationError(\n                    f"Product with ID {item_data[\'product_id\']} does not exist"\n                )\n        \n        return attrs\n    \n    def create(self, validated_data):\n        """Create order with items"""\n        items_data = validated_data.pop(\'items\')\n        user = self.context[\'request\'].user\n        \n        # Create the order\n        order = Order.objects.create(user=user,' additional_kwargs={} response_metadata={'id': 'msg_01MAoHvnvLnc9Agzxh6hRfxR', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--9b51b30e-9862-4720-8be8-7fb62543c250-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}