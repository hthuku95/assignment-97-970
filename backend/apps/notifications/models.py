content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.core.exceptions import ValidationError\nfrom django.utils import timezone\nfrom django.utils.translation import gettext_lazy as _\nimport uuid\nimport logging\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n\nclass NotificationManager(models.Manager):\n    """Custom manager for Notification model."""\n    \n    def unread(self):\n        """Return unread notifications."""\n        return self.filter(is_read=False)\n    \n    def read(self):\n        """Return read notifications."""\n        return self.filter(is_read=True)\n    \n    def for_user(self, user):\n        """Return notifications for a specific user."""\n        return self.filter(recipient=user)\n    \n    def mark_all_read(self, user):\n        """Mark all notifications as read for a user."""\n        return self.filter(recipient=user, is_read=False).update(\n            is_read=True,\n            read_at=timezone.now()\n        )\n    \n    def delete_old_notifications(self, days=30):\n        """Delete notifications older than specified days."""\n        cutoff_date = timezone.now() - timezone.timedelta(days=days)\n        return self.filter(created_at__lt=cutoff_date).delete()\n\n\nclass NotificationTemplate(models.Model):\n    """Template for notification messages."""\n    \n    NOTIFICATION_TYPES = [\n        (\'order_created\', _(\'Order Created\')),\n        (\'order_updated\', _(\'Order Updated\')),\n        (\'order_cancelled\', _(\'Order Cancelled\')),\n        (\'order_shipped\', _(\'Order Shipped\')),\n        (\'order_delivered\', _(\'Order Delivered\')),\n        (\'payment_successful\', _(\'Payment Successful\')),\n        (\'payment_failed\', _(\'Payment Failed\')),\n        (\'payment_refunded\', _(\'Payment Refunded\')),\n        (\'product_back_in_stock\', _(\'Product Back in Stock\')),\n        (\'product_price_drop\', _(\'Product Price Drop\')),\n        (\'review_response\', _(\'Review Response\')),\n        (\'account_created\', _(\'Account Created\')),\n        (\'password_reset\', _(\'Password Reset\')),\n        (\'email_verification\', _(\'Email Verification\')),\n        (\'security_alert\', _(\'Security Alert\')),\n        (\'promotion\', _(\'Promotion\')),\n        (\'system_maintenance\', _(\'System Maintenance\')),\n        (\'custom\', _(\'Custom\')),\n    ]\n    \n    PRIORITY_LEVELS = [\n        (\'low\', _(\'Low\')),\n        (\'medium\', _(\'Medium\')),\n        (\'high\', _(\'High\')),\n        (\'urgent\', _(\'Urgent\')),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    notification_type = models.CharField(max_length=50, choices=NOTIFICATION_TYPES)\n    title_template = models.CharField(max_length=255)\n    message_template = models.TextField()\n    priority = models.CharField(max_length=20, choices=PRIORITY_LEVELS, default=\'medium\')\n    is_active = models.BooleanField(default=True)\n    send_email = models.BooleanField(default=False)\n    send_sms = models.BooleanField(default=False)\n    send_push = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'notification_templates\'\n        verbose_name = _(\'Notification Template\')\n        verbose_name_plural = _(\'Notification Templates\')\n        ordering = [\'name\']\n    \n    def __str__(self):\n        return f"{self.name} ({self.get_notification_type_display()})"\n    \n    def clean(self):\n        """Validate template fields."""\n        if' additional_kwargs={} response_metadata={'id': 'msg_015tJnfiBB7DoXVHpSU5oTnj', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--4991e163-037a-4776-b719-ed147997d48c-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}