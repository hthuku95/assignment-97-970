content='from rest_framework import serializers\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom rest_framework_simplejwt.serializers import TokenObtainPairSerializer\nfrom rest_framework_simplejwt.tokens import RefreshToken\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user registration with password confirmation and validation.\n    """\n    password = serializers.CharField(\n        write_only=True,\n        min_length=8,\n        style={\'input_type\': \'password\'}\n    )\n    password_confirm = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n    email = serializers.EmailField(required=True)\n    first_name = serializers.CharField(required=True, max_length=30)\n    last_name = serializers.CharField(required=True, max_length=30)\n\n    class Meta:\n        model = User\n        fields = (\'username\', \'email\', \'first_name\', \'last_name\', \'password\', \'password_confirm\')\n\n    def validate_email(self, value):\n        """\n        Validate that email is unique.\n        """\n        if User.objects.filter(email=value).exists():\n            raise serializers.ValidationError("A user with this email already exists.")\n        return value\n\n    def validate_username(self, value):\n        """\n        Validate that username is unique and meets requirements.\n        """\n        if User.objects.filter(username=value).exists():\n            raise serializers.ValidationError("A user with this username already exists.")\n        \n        if len(value) < 3:\n            raise serializers.ValidationError("Username must be at least 3 characters long.")\n        \n        return value\n\n    def validate(self, attrs):\n        """\n        Validate that passwords match and meet Django\'s password requirements.\n        """\n        password = attrs.get(\'password\')\n        password_confirm = attrs.get(\'password_confirm\')\n\n        if password != password_confirm:\n            raise serializers.ValidationError({\n                \'password_confirm\': \'Passwords do not match.\'\n            })\n\n        # Validate password using Django\'s built-in validators\n        try:\n            validate_password(password)\n        except ValidationError as e:\n            raise serializers.ValidationError({\n                \'password\': list(e.messages)\n            })\n\n        return attrs\n\n    def create(self, validated_data):\n        """\n        Create and return a new user instance with encrypted password.\n        """\n        validated_data.pop(\'password_confirm\', None)\n        \n        user = User.objects.create_user(\n            username=validated_data[\'username\'],\n            email=validated_data[\'email\'],\n            first_name=validated_data[\'first_name\'],\n            last_name=validated_data[\'last_name\'],\n            password=validated_data[\'password\']\n        )\n        \n        logger.info(f"New user registered: {user.username} ({user.email})")\n        return user\n\n\nclass UserLoginSerializer(serializers.Serializer):\n    """\n    Serializer for user login with username/email and password.\n    """\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n\n    def validate(self, attrs):\n        """\n        Validate user credentials and authenticate.\n        """\n        username = attrs.get(\'username\')\n        password = attrs.get(\'password\')\n\n        if not username or not password:\n            raise serializers.ValidationError(\'Both username and password are required.\')\n\n        # Try to authenticate with username first, then with email\n        user = authenticate(username=username, password=password)\n        \n        if not user:\n            # Try to find user by email if username authentication failed\n            try:\n                user_obj = User.objects.get(email=username)\n                user = authenticate(username=user_obj.username, password=password)\n            except User.DoesNotExist:\n                pass\n\n        if not user:' additional_kwargs={} response_metadata={'id': 'msg_01Xuhyfqp5hQta6T25WpsXk7', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--85ae31d3-f2dd-4e34-bd02-0c5cace7441d-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}