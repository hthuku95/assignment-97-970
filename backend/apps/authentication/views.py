content='from rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import AllowAny, IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.models import User\nfrom django.core.validators import validate_email\nfrom django.core.exceptions import ValidationError\nfrom django.db import transaction\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.mail import send_mail\nfrom django.conf import settings\nfrom django.utils.crypto import get_random_string\nfrom django.utils import timezone\nfrom datetime import timedelta\nimport logging\n\nfrom .models import UserProfile, EmailVerification, PasswordReset\nfrom .serializers import UserRegistrationSerializer, UserProfileSerializer, PasswordChangeSerializer\n\nlogger = logging.getLogger(__name__)\n\n\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    """\n    Custom token obtain view with additional user information\n    """\n    \n    def post(self, request, *args, **kwargs):\n        try:\n            response = super().post(request, *args, **kwargs)\n            if response.status_code == 200:\n                user = authenticate(\n                    username=request.data.get(\'username\'),\n                    password=request.data.get(\'password\')\n                )\n                if user:\n                    profile = getattr(user, \'profile\', None)\n                    response.data.update({\n                        \'user\': {\n                            \'id\': user.id,\n                            \'username\': user.username,\n                            \'email\': user.email,\n                            \'first_name\': user.first_name,\n                            \'last_name\': user.last_name,\n                            \'is_verified\': profile.is_verified if profile else False\n                        }\n                    })\n                    logger.info(f"User {user.username} logged in successfully")\n            return response\n        except Exception as e:\n            logger.error(f"Login error: {str(e)}")\n            return Response(\n                {\'error\': \'Login failed. Please try again.\'},\n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\n@api_view([\'POST\'])\n@permission_classes([AllowAny])\ndef register_user(request):\n    """\n    Register a new user account\n    """\n    try:\n        serializer = UserRegistrationSerializer(data=request.data)\n        \n        if not serializer.is_valid():\n            return Response(\n                {\'errors\': serializer.errors},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Extract validated data\n        username = serializer.validated_data[\'username\']\n        email = serializer.validated_data[\'email\']\n        password = serializer.validated_data[\'password\']\n        first_name = serializer.validated_data.get(\'first_name\', \'\')\n        last_name = serializer.validated_data.get(\'last_name\', \'\')\n        \n        # Check if user already exists\n        if User.objects.filter(username=username).exists():\n            return Response(\n                {\'error\': \'Username already exists\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        if User.objects.filter(email=email).exists():\n            return Response(\n                {\'error\': \'Email already registered\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Validate email format\n        try:\n            validate_email(email)\n        except ValidationError:\n            return Response(\n                {\'error\': \'Invalid email format\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Validate password strength\n        try:\n            validate_password(password)\n        except ValidationError as e:\n            return Response(\n                {\'error\': list(e.messages)},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Create user' additional_kwargs={} response_metadata={'id': 'msg_01Crx258kJGyZqM1k77qSDUi', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--625c753c-d57f-42b5-a51a-a907b13619c3-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}