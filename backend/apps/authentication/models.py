content='from django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.utils import timezone\nfrom django.core.validators import RegexValidator\nimport uuid\n\n\nclass User(AbstractUser):\n    """\n    Custom user model extending Django\'s AbstractUser.\n    Includes additional fields for e-commerce functionality.\n    """\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    email = models.EmailField(unique=True, max_length=255)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    phone_number = models.CharField(\n        max_length=15,\n        blank=True,\n        null=True,\n        validators=[\n            RegexValidator(\n                regex=r\'^\\+?1?\\d{9,15}$\',\n                message="Phone number must be entered in the format: \'+999999999\'. Up to 15 digits allowed."\n            )\n        ]\n    )\n    date_of_birth = models.DateField(blank=True, null=True)\n    is_email_verified = models.BooleanField(default=False)\n    is_phone_verified = models.BooleanField(default=False)\n    avatar = models.ImageField(upload_to=\'avatars/\', blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    last_login_ip = models.GenericIPAddressField(blank=True, null=True)\n    \n    # E-commerce specific fields\n    stripe_customer_id = models.CharField(max_length=255, blank=True, null=True)\n    preferred_currency = models.CharField(max_length=3, default=\'USD\')\n    \n    USERNAME_FIELD = \'email\'\n    REQUIRED_FIELDS = [\'username\', \'first_name\', \'last_name\']\n    \n    class Meta:\n        db_table = \'auth_user\'\n        verbose_name = \'User\'\n        verbose_name_plural = \'Users\'\n    \n    def __str__(self):\n        return f"{self.email} ({self.get_full_name()})"\n    \n    def get_full_name(self):\n        """Return the full name of the user."""\n        return f"{self.first_name} {self.last_name}".strip()\n    \n    def get_short_name(self):\n        """Return the short name of the user."""\n        return self.first_name\n    \n    @property\n    def is_profile_complete(self):\n        """Check if user profile is complete."""\n        required_fields = [\n            self.first_name,\n            self.last_name,\n            self.email,\n            self.phone_number\n        ]\n        return all(field for field in required_fields)\n\n\nclass UserProfile(models.Model):\n    """\n    Extended user profile information for e-commerce functionality.\n    """\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'profile\')\n    bio = models.TextField(max_length=500, blank=True)\n    location = models.CharField(max_length=100, blank=True)\n    website = models.URLField(blank=True)\n    company = models.CharField(max_length=100, blank=True)\n    \n    # Preferences\n    newsletter_subscription = models.BooleanField(default=False)\n    marketing_emails = models.BooleanField(default=False)\n    order_notifications = models.BooleanField(default=True)\n    \n    # Privacy settings\n    profile_visibility = models.CharField(\n        max_length=20,\n        choices=[\n            (\'public\', \'Public\'),\n            (\'private\', \'Private\'),\n            (\'friends\', \'Friends Only\')\n        ],\n        default=\'public\'\n    )\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'user_profile\'\n        verbose_' additional_kwargs={} response_metadata={'id': 'msg_01GV3krPYgzKFQPZLoGXeLGG', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--56cdd38c-3990-4b13-b6b6-9a3b15162212-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}