content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.urls import reverse\nfrom django.utils.text import slugify\nfrom decimal import Decimal\nimport uuid\nfrom PIL import Image\nimport os\n\nUser = get_user_model()\n\n\nclass Category(models.Model):\n    """Product category model"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    description = models.TextField(blank=True, null=True)\n    image = models.ImageField(upload_to=\'categories/\', blank=True, null=True)\n    parent = models.ForeignKey(\n        \'self\', \n        on_delete=models.CASCADE, \n        blank=True, \n        null=True,\n        related_name=\'subcategories\'\n    )\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name_plural = \'Categories\'\n        ordering = [\'name\']\n\n    def __str__(self):\n        return self.name\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n    def get_absolute_url(self):\n        return reverse(\'category-detail\', kwargs={\'slug\': self.slug})\n\n    @property\n    def product_count(self):\n        return self.products.filter(is_active=True).count()\n\n\nclass Brand(models.Model):\n    """Product brand model"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    description = models.TextField(blank=True, null=True)\n    logo = models.ImageField(upload_to=\'brands/\', blank=True, null=True)\n    website = models.URLField(blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        ordering = [\'name\']\n\n    def __str__(self):\n        return self.name\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n    def get_absolute_url(self):\n        return reverse(\'brand-detail\', kwargs={\'slug\': self.slug})\n\n\nclass Product(models.Model):\n    """Main product model"""\n    CONDITION_CHOICES = [\n        (\'new\', \'New\'),\n        (\'used\', \'Used\'),\n        (\'refurbished\', \'Refurbished\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    slug = models.SlugField(max_length=200, unique=True, blank=True)\n    description = models.TextField()\n    short_description = models.CharField(max_length=500, blank=True)\n    \n    # Pricing\n    price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    compare_price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2, \n        blank=True, \n        null=True,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    cost_price = models.' additional_kwargs={} response_metadata={'id': 'msg_01Dd7GqqfVrFh3mdZaGbeBET', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a0eb877b-f456-4e66-b987-36022b504193-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}