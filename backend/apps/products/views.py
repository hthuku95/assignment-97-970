content='from rest_framework import generics, filters, status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom rest_framework.response import Response\nfrom rest_framework.pagination import PageNumberPagination\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.db.models import Q, Avg, Count\nfrom django.shortcuts import get_object_or_404\nfrom django.core.cache import cache\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nimport logging\n\nfrom .models import Product, Category, Review\nfrom .serializers import (\n    ProductSerializer,\n    ProductDetailSerializer,\n    CategorySerializer,\n    ReviewSerializer\n)\nfrom .filters import ProductFilter\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProductPagination(PageNumberPagination):\n    page_size = 12\n    page_size_query_param = \'page_size\'\n    max_page_size = 100\n\n\nclass ProductListView(generics.ListAPIView):\n    """\n    List all products with filtering, searching, and pagination.\n    Supports filtering by category, price range, availability, and rating.\n    """\n    serializer_class = ProductSerializer\n    pagination_class = ProductPagination\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = ProductFilter\n    search_fields = [\'name\', \'description\', \'category__name\']\n    ordering_fields = [\'price\', \'created_at\', \'rating\', \'name\']\n    ordering = [\'-created_at\']\n    permission_classes = [IsAuthenticatedOrReadOnly]\n\n    def get_queryset(self):\n        """\n        Get products queryset with optimized database queries.\n        """\n        try:\n            queryset = Product.objects.select_related(\'category\').prefetch_related(\n                \'reviews\'\n            ).annotate(\n                avg_rating=Avg(\'reviews__rating\'),\n                review_count=Count(\'reviews\')\n            ).filter(is_active=True)\n\n            # Cache popular products\n            cache_key = \'popular_products\'\n            popular_products = cache.get(cache_key)\n            if popular_products is None:\n                popular_products = list(\n                    queryset.filter(avg_rating__gte=4.0).values_list(\'id\', flat=True)[:20]\n                )\n                cache.set(cache_key, popular_products, 3600)  # Cache for 1 hour\n\n            return queryset\n        except Exception as e:\n            logger.error(f"Error fetching products: {str(e)}")\n            return Product.objects.none()\n\n    @method_decorator(cache_page(60 * 15))  # Cache for 15 minutes\n    def get(self, request, *args, **kwargs):\n        return super().get(request, *args, **kwargs)\n\n\nclass ProductDetailView(generics.RetrieveAPIView):\n    """\n    Retrieve detailed information about a specific product.\n    """\n    serializer_class = ProductDetailSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    lookup_field = \'slug\'\n\n    def get_queryset(self):\n        return Product.objects.select_related(\'category\').prefetch_related(\n            \'reviews__user\',\n            \'images\'\n        ).filter(is_active=True)\n\n    def get_object(self):\n        try:\n            obj = super().get_object()\n            # Increment view count\n            Product.objects.filter(id=obj.id).update(view_count=obj.view_count + 1)\n            return obj\n        except Product.DoesNotExist:\n            logger.warning(f"Product not found: {self.kwargs.get(\'slug\')}")\n            raise\n\n\nclass CategoryListView(generics.ListAPIView):\n    """\n    List all active categories.\n    """\n    serializer_class = CategorySerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n\n    def get_queryset(self):\n        return Category.objects.filter(is_active=True).annotate(\n            product_count=' additional_kwargs={} response_metadata={'id': 'msg_013hoeR2Qw4KkqX3TjxT27kA', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a83b5f60-ba0a-4f75-ba0a-d56379aedb3e-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}