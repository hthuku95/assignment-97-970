content='from rest_framework import serializers\nfrom django.core.exceptions import ValidationError\nfrom django.db import transaction\nfrom .models import Product, ProductImage, Category, ProductVariant, Review\nfrom apps.users.serializers import UserBasicSerializer\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    """Serializer for product categories"""\n    \n    class Meta:\n        model = Category\n        fields = [\'id\', \'name\', \'slug\', \'description\', \'parent\', \'is_active\', \'created_at\']\n        read_only_fields = [\'id\', \'slug\', \'created_at\']\n    \n    def validate_name(self, value):\n        """Validate category name uniqueness"""\n        if not value or len(value.strip()) < 2:\n            raise serializers.ValidationError("Category name must be at least 2 characters long")\n        \n        # Check for uniqueness excluding current instance\n        queryset = Category.objects.filter(name__iexact=value.strip())\n        if self.instance:\n            queryset = queryset.exclude(pk=self.instance.pk)\n        \n        if queryset.exists():\n            raise serializers.ValidationError("A category with this name already exists")\n        \n        return value.strip()\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    """Serializer for product images"""\n    \n    class Meta:\n        model = ProductImage\n        fields = [\'id\', \'image\', \'alt_text\', \'is_primary\', \'order\']\n        read_only_fields = [\'id\']\n    \n    def validate_image(self, value):\n        """Validate image file"""\n        if value:\n            # Check file size (5MB limit)\n            if value.size > 5 * 1024 * 1024:\n                raise serializers.ValidationError("Image file size cannot exceed 5MB")\n            \n            # Check file type\n            allowed_types = [\'image/jpeg\', \'image/png\', \'image/webp\']\n            if hasattr(value, \'content_type\') and value.content_type not in allowed_types:\n                raise serializers.ValidationError("Only JPEG, PNG, and WebP images are allowed")\n        \n        return value\n\n\nclass ProductVariantSerializer(serializers.ModelSerializer):\n    """Serializer for product variants"""\n    \n    class Meta:\n        model = ProductVariant\n        fields = [\n            \'id\', \'sku\', \'name\', \'price\', \'stock_quantity\', \n            \'attributes\', \'is_active\', \'created_at\'\n        ]\n        read_only_fields = [\'id\', \'created_at\']\n    \n    def validate_sku(self, value):\n        """Validate SKU uniqueness"""\n        if not value or len(value.strip()) < 3:\n            raise serializers.ValidationError("SKU must be at least 3 characters long")\n        \n        # Check for uniqueness excluding current instance\n        queryset = ProductVariant.objects.filter(sku__iexact=value.strip())\n        if self.instance:\n            queryset = queryset.exclude(pk=self.instance.pk)\n        \n        if queryset.exists():\n            raise serializers.ValidationError("A variant with this SKU already exists")\n        \n        return value.strip().upper()\n    \n    def validate_price(self, value):\n        """Validate price is positive"""\n        if value is not None and value < 0:\n            raise serializers.ValidationError("Price cannot be negative")\n        return value\n    \n    def validate_stock_quantity(self, value):\n        """Validate stock quantity is not negative"""\n        if value is not None and value < 0:\n            raise serializers.ValidationError("Stock quantity cannot be negative")\n        return value\n\n\nclass ReviewSerializer(serializers.ModelSerializer):\n    """Serializer for product reviews"""\n    user = UserBasicSerializer(read_only=True)\n    \n    class Meta:\n        model = Review\n        fields = [\n            \'id\', \'user\', \'rating\', \'title\', \'comment\', \n            \'is_verified_purchase\', \'created_at\', \'updated_at\'\n        ]\n        read_only' additional_kwargs={} response_metadata={'id': 'msg_01PcwMPQeG2yLYyxKh5VTHtp', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--b6e3c459-0995-4b56-8325-9d971b111716-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}